name: CI/CD Pipeline

on:
  push:
    branches:
      - main # Trigger this workflow when pushing to the main branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    services:
      docker:
        image: docker:stable
        options: --privileged
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock

    steps:
      - name: Checkout code
        uses: actions/checkout@v2 # Checkout the code from the repository

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2 # Set up Docker for multi-platform builds

      - name: Log in to Docker Hub
        uses: docker/login-action@v2 # Log into Docker Hub using secrets
        with:
          username: ${{ secrets.DOCKER_USERNAME }} # Docker Hub username (GitHub secret)
          password: ${{ secrets.DOCKER_PASSWORD }} # Docker Hub password (GitHub secret)

      - name: Build and push frontend image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/myapp-frontend:latest -f frontend/Dockerfile .
          docker push ${{ secrets.DOCKER_USERNAME }}/myapp-frontend:latest  # Push the frontend image

      - name: Build and push backend image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/myapp-backend:latest -f backend/Dockerfile .
          docker push ${{ secrets.DOCKER_USERNAME }}/myapp-backend:latest  # Push the backend image

      - name: Deploy to Server
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }} # Server host IP or domain (GitHub secret)
          SSH_USER: ${{ secrets.SSH_USER }} # SSH user (GitHub secret)
          SSH_KEY: ${{ secrets.SSH_KEY }} # SSH private key (GitHub secret)
        run: |
          ssh -i "$SSH_KEY" -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST << 'EOF'
            docker pull ${{ secrets.DOCKER_USERNAME }}/myapp-frontend:latest  # Pull latest frontend image
            docker pull ${{ secrets.DOCKER_USERNAME }}/myapp-backend:latest  # Pull latest backend image
            docker-compose down  # Stop existing containers
            docker-compose up -d  # Start new containers
          EOF
